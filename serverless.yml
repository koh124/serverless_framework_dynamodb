service: aws-s3-serverless

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  region: ap-northeast-1
  stage: dev
  apiGateway:
    apiKeys:
      - name: mykeysdfg
        value: gfdshdjfgjh77jkljgfffj

  # AWSに環境変数を設定するにはこうする
  # この場合は「ステージ名.storage」というプレフィックスを登録できる
  environment:
    S3_BUCKET: ${self:provider.stage}.storage

# serverless.ymlで使える変数とルール
# ${self}...この"serverless.yml"のグローバルスコープ
# ${self:provider}...":"でスコープ直下のプロパティにアクセスする

  # IAMロールを設定できる
  iamRoleStatements:
    - Effect: Allow # 権限を許可する

      # 許可するアクションを指定する
      # データの取得、追加、更新、削除を許可
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        # - "dynamodb:Scan*"

      # 権限を適用するAWSリソースを指定する
      # AWSリソースの指定方法はarn形式で行う
      # arn(Amazon Resource Name)はAWSのリソースに使える絶対パスのようなもの
      # arnはAWSリソースのページに行くと、大体"ARNを取得"という項目がある
      # Lambda → 関数ページの右上に表示されてる
      # DynamoDB → テーブルを選択して概要タブの"一般的な情報"から"追加情報"を開く
      # ↓arnのサンプル（DynamoDBのusersTableへの参照）
      # arn:aws:dynamodb:ap-northeast-1:123456781234:table/usersTable
      Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/usersTable

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

functions:
  useDynamoDB:
    handler: handler.lambdaHandler
    events:
      - http:
          path: /hello
          method: get
          private: true
          cors: true


resources:
  # 他のファイルのインポート
  - ${file(serverless-dynamodb.yml)} # dynamoDB
  - ${file(serverless-s3.yml)} # s3
  # Resources:
